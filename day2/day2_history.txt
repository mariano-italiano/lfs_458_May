kubectl get nodes
ssh worker01
sudo poweroff
kubectl get nodes
vi .kube/config 
kubectl get nodes
vi .kube/config 
grep client-cert .kube/config |cut -d " " -f6
export client=$(grep client-cert .kube/config |cut -d " " -f6)
export key=$(grep client-key-data .kube/config |cut -d " " -f6)
echo $key
export ca=$(grep certificate-authority-data .kube/config |cut -d " " -f6)
echo $ca
echo $client | base64 -d > client.pem
vi client.pem 
echo $key | base64 -d > client-key.pem
echo $ca | base64 -d > ca.pem
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/nodes
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces | jq -r '.items[].metadata.name'
sudo apt  install jq
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces | jq -r '.items[].metadata.name'
kubectl get namespaces 
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces | jq -r '.items[] | "Namespace name: \(.metadata.name), Status: \(.metadata.status.phase)"'
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces | jq -r '.items[] | "Namespace name: \(.metadata.name), Status: \(.status.phase)"'
scp *.pem root@192.168.1.90:/root
kubectl get pods --all-namespaces 
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces/kube-system/pods/etcd-master
curl --cert client.pem --key client-key.pem --cacert ca.pem https://master:6443/api/v1/namespaces/kube-system/pods/etcd-master/log
vi my-pod.yml
kubectl get pods
kubectl apply -f my-pod.yml 
kubectl get pods
watch -n1 kubectl get pods
kubectl get pods
kubectl get pods -o wide
curl http://192.168.5.1
kubectl get pods -o json
kubectl get pods -o yaml
kubectl edit pod my-pod 
kubectl get pods -o yaml | grep labels -A 5
cp -rp my-pod.yml test-pod.yml
vi test-pod.yml
kubectl apply -f test-pod.yml
kubectl  get pods
vi test-pod.yml
kubectl apply -f test-pod.yml
kubectl  get pods
kubectl  get pods -o wide
kubectl get nodes
cp -rp my-pod.yml test2-pod.yml
vi test2-pod.yml
kubectl apply -f test2-pod.yml
kubectl  get pods -o wide
kubectl get pod my-pod -o yaml
kubectl get pod my-pod -o wide
kubectl get pod my-pod -o wide -h
kubectl get pod my-pod -o wide --sort-by .spec.nodeName
kubectl get pod -o wide --sort-by .spec.nodeName
vi test-pod.yml 
kubectl get pod -o wide --selector app
kubectl get pod -o wide --selector app=my-pod
vi test-pod.yml 
kubectl get pod -o wide --selector app=test-pod
kubectl describe pod my-pod 
kubectl exec -it pods/my-pod -- sh 
curl http://192.168.5.1
kubectl exec -it pods/my-pod -- echo "<html><head></head><body><h1>Hello this is my web server on nginx</h1></body></html>" > index.html
curl http://192.168.5.1
vi index.html 
kubectl exec -it pods/my-pod -- echo "Hello from $hostname"
curl http://192.168.5.1
$hostname
$HOSTNAME
kubectl get pods -h
kubectl get pods --v=3
kubectl get pods --v=6
kubectl get pods --v=10
kubectl delete pod my-pod 
vi marcin-pod.yml
kubectl apply -f marcin-pod.yml
kubec get pods
kubectl get pods
watch -n1 kubectl get pods
kubectl logs pod 
curl http://192.168.5.4:8080
kubectl exec -it pod -- sh
kubectl exec -it pod -- bash
kubectl exec -it test-pod 
kubectl exec -it test-pod -- bash
kubectl exec -it test-pod -- sh
kubectl exec -it pod -- bash
kubectl describe pod pod
kubectl create deployment dep1 --image=busybox
kubectl get deploy
kubectl create deployment dep1 --image=busybox --dry-run -o yaml > dep1.yml
kubectl create deployment dep1 --image=busybox --dry-run=client -o yaml > dep1.yml
vi dep1.yml 
kubectl annotate pod test-pod szkolenie="lfs458 05.2023"
kubectl get pod test-pod 
kubectl get pod test-pod -o yaml
kubectl get pod test-pod -o jsonpath='{.metadata.annotations}'
kubectl describe pod test-pod 
kubectl get pods --all
kubectl get pod --all
kubectl annotate pods --help
kubectl annotate pods --all environment=test
kubectl annotate --overwrite pod pod environment=production
kubectl describe pod pod
kubectl describe pod test-pod 
kubectl annotate pod pod environment-
kubectl describe pod pod
kubectl delete pod --all
kubectl delete deploy,pod --all
vi my-pod.yml 
kubectl apply -f my-pod.yml
kubectl get pods --show-labels 
kubectl get nodes -l
kubectl get pods
kubectl get pods -l
kubectl get pods
kubectl get pods --show-labels
kubectl label pod my-pod environment=test
kubectl get pods --show-labels
kubectl label pod my-pod environment-
kubectl get pods --show-label
kubectl get pods --show-labels
kubectl apply -f test-pod.yml 
kubectl get pods --show-labels
kubectl label pod test-pod app=my-app
kubectl label pod test-pod app=my-app --overwrite
kubectl label pod test-pod app=my-app
kubectl get pods --show-labels
ls
kubectl apply -f marcin-pod.yml 
kubectl get pods --show-labels
kubectl get pods -h
kubectl get pods -l app=my-app
\
kubectl get pods -A
kubectl get pods -A --show-labels 
kubectl get pods --all-namespaces 
kubectl get pods --all-namespaces -l 'component in(kube-apiserver),app=my-app'
kubectl get pods --all-namespaces -l 'component in(kube-apiserver)'
kubectl get pods --all-namespaces -l 'component in(kube-apiserver),app in(my-app)'
kubectl get pods --all-namespaces -l 'tier in(control-plane)'
kubectl get pods --all-namespaces -l 'tier in(control-plane), component in(etcd)'
kubectl get pods --all-namespaces -l 'tier in(control-plane), component notin(etcd)'
kubectl get pods --all-namespaces -l 'tire=control-plane'
kubectl get pods --all-namespaces -l 'tier=control-plane'
vi .kube/config 
openssl genrsa -out devops.pem
openssl req -new -key devops.pem -out devops.csr -subj "/CN=devops"
ls -la
less devops.csr
cat devops.csr | base64 | tr -d '\n'
vi user-request-devops.yml
kubectl create -f user-request-devops.yml
kubectl get csr
kubectl certificate approve user-request-devops
kubectl get csr
kubectl get csr user-request-devops -o yaml
echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lSQU02S3ovR2JpOUFvRUZLS2V2YW5mOFl3RFFZSktvWklodmNOQVFFTEJRQXcKRlRFVE1CRUdBMVVFQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TXpBMU1UWXhNRE00TlRsYUZ3MHlOREExTVRVeApNRE00TlRsYU1CRXhEekFOQmdOVkJBTVRCbVJsZG05d2N6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFKamgzbTRubmhTVXBLTUQyYSs0dkpCdEh6Vk1qOUNUQXJGUHBhRmNXNEVaUmV3bzZNR28KVE5YVFZWc2NDU1pZa1V1YVdJVmhjcHJacmQ0YS9aV0w5WDlSbGJLdVUzd0YvMFY3SUZONnFJMWV6ZUxXUEc4cwppTHZtZXRlUjZvMTBLOVVXM2t1b3RQMXBvdWJnT2UvQi8wd096azdkQmpSakh4bmZFOGtTZXJadGRnVUxITUgrCmJ2bVp3RmRIS0Z6Vk9CODRIRG4xUXRsNDUxNGdDUlFCMDlpT2FTdlJNQ2QvUEhGUEE0UWVId3UzRGVGdHhpLzYKOFVaZlpUSmYvOWdRWitnZGtoK2dadDR2K1E2NGNLTVg4WGQxdzYyL1Q5ZnVnc2NReFVRbGh5d1NmejgvaTQ5Qwp4cnhoem5SWm42T2h1dVQrcW9sWnh1TkdGMkNQdHBEaitsY0NBd0VBQWFOV01GUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3cKRm9BVSthWG4xR3ZYR1FZUG1ja2FGMnhNN3ZueXlwY3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQzZWdzZ2Vgo3YTZXLzFNWTBsRmlXY2src1lHRHljSFVKbGpOWEdIaUtlUmpyNExFcGZNdnN2VnM2am10azdURTVieS85ZGVZCkZWUTJ1cHdKWk5IcXJqZ2RyRXBSMVdKeUFhTVJ5OCtyUEF3YUNVTW55QW9tYk1DZWpFMTVlNW93Zm5PS1hiN0wKS2RGbWkyL0ljeHZWRytBa3F2L3V6U2ZzL0x6WGtTY1hLKzk1Q3lCY2MzWWE1dXdFd05tZkZwbXpnQTZiMmxmOAp3TzlJak1LVUtLRWkrSmxzbHJ1YU5SQ3ZVRjZVM3BGMVpqQVpuYjF3Zm0wa1FzZFErSkdIUnZJWkIzNHRFWXc1CitGWnRyRzJnQVdxTWo0WDlWZkw5MnUydU8xT3V5KzNTbzFkR28vTXpMRmluMkx0WnNtSlFNZ2Y4OTB4QUhWSmoKS0hmTnhma0Vmd2ZQYkVjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" | base64 -d > devops-user.crt
vi devops-user.crt
kubectl --kubeconfig config-devops config set-cluster production --insecure-skip-tls-verify=true --server=https://master:6443
vi .kube/config 
vi config-devops 
kubectl --kubeconfig config-devops config set-credentials --client-certificate=devops-user.crt --client-key=devops.pem --embed-certs=true
kubectl --kubeconfig config-devops config set-credentials devops --client-certificate=devops-user.crt --client-key=devops.pem --embed-certs=true
vi config-devops 
kubectl --kubeconfig config-devops config set-context default --cluster production --user devops
vi config-devops 
kubectl create namespace devops-ns
kubectl get ns
vi devops-role.yml
kubectl apply -f devops-role.yml
vi devops-rolebinding.yml
kubectl get role
kubectl get role -n devops-ns 
vi devops-rolebinding.yml
kubectl apply -f devops-rolebinding.yml
vi marcin-pod.yml 
kubectl apply -f marcin-pod.yml -n devops-ns 
kubectl get pods -n devops-ns 
kubectl -n devops-ns --kubeconfig config-devops get pods
kubectl --kubeconfig config-devops config use-context default
kubectl -n devops-ns --kubeconfig config-devops get pods
vi config-devops 
kubectl -n devops-ns --kubeconfig config-devops get deploy
kubectl -n devops-ns --kubeconfig config-devops delete pod marcin-pod 
kubectl -n devops-ns edit role devops 
kubectl -n devops-ns --kubeconfig config-devops delete pod marcin-pod 
kubectl -n devops-ns edit role devops 
kubectl apply -f marcin-pod.yml -n devops-ns 
kubectl -n devops-ns --kubeconfig config-devops get deploy
kubectl -n devops-ns --kubeconfig config-devops get pods
kubectl -n devops-ns --kubeconfig config-devops delete pod marcin-pod 
sudo useradd devops
sudo -i
kubectl create serviceaccount api-user
kubectl get clusterrole
kubectl create clusterrolebinding api-user-binding --clusterrole cluster-admin --serviceaccount api-user
kubectl create clusterrolebinding api-user-binding --clusterrole cluster-admin --serviceaccount default:api-user
kubectl create token api-user 
export TOKEN="eyJhbGciOiJSUzI1NiIsImtpZCI6ImNyN25KZTVqQW96UmpWeW5selBjZ0RKRFlkN3ZsbFhBRUNjR3dZWm1yejgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjg0MjM5MjgxLCJpYXQiOjE2ODQyMzU2ODEsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImFwaS11c2VyIiwidWlkIjoiODU3MTAyY2EtZmZjYy00MTQyLWEzZDYtNGUwODE2ZTMzMjhmIn19LCJuYmYiOjE2ODQyMzU2ODEsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmFwaS11c2VyIn0.hM2ccmYdt5vsGp0Gaw3zEiUXkjmZlGm8pjPwdbb0JoYoI8V8ZTrJLglHNf9HW7lr0fFqo20b6gwphC1dojhTls8zrrLIxCFYBId0d-1sEv-Zd441yw2Zy_Wq-t5C8tbL_q47V6ybnCTEQ2MPa5bFeJ7c_mLTvtHeH_qcurgi5CbEXUjRpbzpA-Lqs1iny59I0AaFQUEcLGijZB7CRKWFDQeJ5AMtFZivZ-8dSGV2L0wXngBjUadT5pnHagUyMh8JyMNPy-buS_e8JZzoChBgw_DzNsn4aCic3HXTwQk--mmW5owKD1_qeKoITi4ih-SO761BNzFjPww3FLaTf8VQ5Q"
echo $TOKEN 
curl -k -H "Authorization: Bearer $TOKEN" -X GET https://master:6443/api/v1/namespaces/default/pods
kubectl  get pods
vi devops-role.yml 
cp -rp devops-role.yml apiuser-clusterrole.yml
vi apiuser-clusterrole.yml
kubectl edit clusterrolebindings.rbac.authorization.k8s.io api-user-binding 
kubectl apply -f apiuser-clusterrole.yml 
vi apiuser-clusterrole.yml
kubectl apply -f apiuser-clusterrole.yml 
kubectl edit clusterrolebindings.rbac.authorization.k8s.io api-user-binding 
kubectl get clusterrole
kubectl get clusterrolebindings.rbac.authorization.k8s.io 
kubectl delete clusterrolebindings.rbac.authorization.k8s.io api-user-binding
kubectl create clusterrolebinding api-user-binding --clusterrole apiuser-clusterrole --serviceaccount default:api-user
curl -k -H "Authorization: Bearer $TOKEN" -X GET https://master:6443/api/v1/namespaces/default/pods
curl -k -H "Authorization: Bearer $TOKEN" -X GET https://master:6443/api/v1/namespaces/default/deployments
history
git clone https://github.com/mariano-italiano/lfs_458_May.git
sudo apt install git
git config --global credential.helper store 
git config --global user.email 'markuj5@gmail.com'
git clone https://github.com/mariano-italiano/lfs_458_May.git
cd lfs_458_May/
ls
mkdir day2
cp -rp ../*.yml day2/
cd day2
ls -la
history | awk '$1>29' | cut -c 8- > day2_history.txt
